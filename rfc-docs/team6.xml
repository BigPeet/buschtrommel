<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
  
  

  


  

  <head>
    <title>
      Attachment – tm-projekt6
    </title>
        <link rel="search" href="/trac/tm-projekt6/search" />
        <link rel="help" href="/trac/tm-projekt6/wiki/TracGuide" />
        <link rel="alternate" href="/trac/tm-projekt6/raw-attachment/wiki/Draft_Gruppe6/rfc_6.xml" type="text/xml; charset=utf-8" title="Original Format" />
        <link rel="up" href="/trac/tm-projekt6/wiki/Draft_Gruppe6" title="Draft_Gruppe6" />
        <link rel="start" href="/trac/tm-projekt6/wiki" />
        <link rel="stylesheet" href="/trac/tm-projekt6/chrome/common/css/trac.css" type="text/css" /><link rel="stylesheet" href="/trac/tm-projekt6/chrome/common/css/code.css" type="text/css" />
        <link rel="shortcut icon" href="/trac/tm-projekt6/chrome/common/trac.ico" type="image/x-icon" />
        <link rel="icon" href="/trac/tm-projekt6/chrome/common/trac.ico" type="image/x-icon" />
    <script type="text/javascript" src="/trac/tm-projekt6/chrome/common/js/jquery.js"></script><script type="text/javascript" src="/trac/tm-projekt6/chrome/common/js/trac.js"></script><script type="text/javascript" src="/trac/tm-projekt6/chrome/common/js/search.js"></script>
    <!--[if lt IE 7]>
    <script type="text/javascript" src="/trac/tm-projekt6/chrome/common/js/ie_pre7_hacks.js"></script>
    <![endif]-->
  </head>
  <body>
    <div id="banner">
      <div id="header">
        <a id="logo" href="/trac/tm-projekt6/wiki/TracIni#header_logo-section"><img src="/trac/tm-projekt6/chrome/site/your_project_logo.png" alt="(please configure the [header_logo] section in trac.ini)" /></a>
      </div>
      <form id="search" action="/trac/tm-projekt6/search" method="get">
      </form>
      <div id="metanav" class="nav">
    <ul>
      <li class="first">logged in as tmvor103@TM.UNI-KARLSRUHE.DE</li><li><a href="/trac/tm-projekt6/logout">Logout</a></li><li><a href="/trac/tm-projekt6/prefs">Preferences</a></li><li><a href="/trac/tm-projekt6/wiki/TracGuide">Help/Guide</a></li><li class="last"><a href="/trac/tm-projekt6/about">About Trac</a></li>
    </ul>
  </div>
    </div>
    <div id="mainnav" class="nav">
    <ul>
      <li class="last first active"><a href="/trac/tm-projekt6/wiki">Wiki</a></li>
    </ul>
  </div>
    <div id="main">
      <div id="ctxtnav" class="nav">
        <h2>Context Navigation</h2>
          <ul>
              <li class="last first"><a href="/trac/tm-projekt6/wiki/Draft_Gruppe6">Back to Draft_Gruppe6</a></li>
          </ul>
        <hr />
      </div>
    <div id="content" class="attachment">
        <h1><a href="/trac/tm-projekt6/wiki/Draft_Gruppe6">Draft_Gruppe6</a>: rfc_6.xml</h1>
        <table id="info" summary="Description">
          <tbody>
            <tr>
              <th scope="col">
                File rfc_6.xml, <span title="11415 bytes">11.1 KB</span>
                (added by tmvor109@…,  <a class="timeline" href="/trac/tm-projekt6/timeline?from=2012-11-13T21%3A18%3A49%2B0100&amp;precision=second" title="2012-11-13T21:18:49+0100 in Timeline">21 hours</a> ago)
              </th>
            </tr>
            <tr>
              <td class="message searchable">
                
              </td>
            </tr>
          </tbody>
        </table>
        <div id="preview" class="searchable">
    <table class="code"><thead><tr><th class="lineno" title="Line numbers">Line</th><th class="content"> </th></tr></thead><tbody><tr><th id="L1"><a href="#L1">1</a></th><td>&lt;?xml version="1.0" encoding="UTF-8"?&gt;</td></tr><tr><th id="L2"><a href="#L2">2</a></th><td>&lt;!DOCTYPE rfc SYSTEM "rfc2629.dtd"&gt;</td></tr><tr><th id="L3"><a href="#L3">3</a></th><td>&lt;!-- TODO none of the possible values for ipr really fits the section from</td></tr><tr><th id="L4"><a href="#L4">4</a></th><td>  the wiki --&gt;</td></tr><tr><th id="L5"><a href="#L5">5</a></th><td>&lt;rfc ipr="none"&gt;</td></tr><tr><th id="L6"><a href="#L6">6</a></th><td></td></tr><tr><th id="L7"><a href="#L7">7</a></th><td>&lt;!-- TODO in the long run, we may have to split this file into</td></tr><tr><th id="L8"><a href="#L8">8</a></th><td>  several smaller ones to ease managing requests for changes and automatic</td></tr><tr><th id="L9"><a href="#L9">9</a></th><td>  diff creation. Includes are suppored by xml2rfc. --&gt;</td></tr><tr><th id="L10"><a href="#L10">10</a></th><td>&lt;front&gt;</td></tr><tr><th id="L11"><a href="#L11">11</a></th><td>  &lt;title&gt;Ad-hoc File Transfer &lt;/title&gt;</td></tr><tr><th id="L12"><a href="#L12">12</a></th><td>  </td></tr><tr><th id="L13"><a href="#L13">13</a></th><td>  &lt;author&gt;</td></tr><tr><th id="L14"><a href="#L14">14</a></th><td>    &lt;!-- TODO --&gt;</td></tr><tr><th id="L15"><a href="#L15">15</a></th><td>  &lt;/author&gt;</td></tr><tr><th id="L16"><a href="#L16">16</a></th><td>  </td></tr><tr><th id="L17"><a href="#L17">17</a></th><td>  &lt;date /&gt;</td></tr><tr><th id="L18"><a href="#L18">18</a></th><td>  </td></tr><tr><th id="L19"><a href="#L19">19</a></th><td>  &lt;area&gt;&lt;!-- TODO --&gt;&lt;/area&gt;</td></tr><tr><th id="L20"><a href="#L20">20</a></th><td>  &lt;workgroup&gt;Telematics project winter 2012/2013, KIT&lt;/workgroup&gt;</td></tr><tr><th id="L21"><a href="#L21">21</a></th><td>  &lt;keyword&gt;Downloads&lt;/keyword&gt;</td></tr><tr><th id="L22"><a href="#L22">22</a></th><td>  &lt;keyword&gt;File Transfer&lt;/keyword&gt;</td></tr><tr><th id="L23"><a href="#L23">23</a></th><td>  &lt;keyword&gt;Ad-hoc&lt;/keyword&gt;</td></tr><tr><th id="L24"><a href="#L24">24</a></th><td>  &lt;abstract&gt;</td></tr><tr><th id="L25"><a href="#L25">25</a></th><td>    &lt;t&gt;This document is a draft for the official specification of [...]</td></tr><tr><th id="L26"><a href="#L26">26</a></th><td>      protocol. The protocol is used to find files on and transfer files</td></tr><tr><th id="L27"><a href="#L27">27</a></th><td>      between different hosts domain without the need for a central server</td></tr><tr><th id="L28"><a href="#L28">28</a></th><td>      instance.&lt;/t&gt;</td></tr><tr><th id="L29"><a href="#L29">29</a></th><td>  &lt;/abstract&gt;</td></tr><tr><th id="L30"><a href="#L30">30</a></th><td>&lt;/front&gt;</td></tr><tr><th id="L31"><a href="#L31">31</a></th><td></td></tr><tr><th id="L32"><a href="#L32">32</a></th><td>&lt;!-- -           MIDDLE            - !--&gt;</td></tr><tr><th id="L33"><a href="#L33">33</a></th><td></td></tr><tr><th id="L34"><a href="#L34">34</a></th><td>&lt;middle&gt;</td></tr><tr><th id="L35"><a href="#L35">35</a></th><td>  &lt;section title="Introduction"&gt;</td></tr><tr><th id="L36"><a href="#L36">36</a></th><td>    &lt;t&gt;The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",</td></tr><tr><th id="L37"><a href="#L37">37</a></th><td>      "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this</td></tr><tr><th id="L38"><a href="#L38">38</a></th><td>        document are to be interpreted as described in [RFC 2119].&lt;/t&gt;</td></tr><tr><th id="L39"><a href="#L39">39</a></th><td></td></tr><tr><th id="L40"><a href="#L40">40</a></th><td>    &lt;t&gt;This document specifies a protocol for the ad-hoc transfer of files</td></tr><tr><th id="L41"><a href="#L41">41</a></th><td>      between different hosts inside a broadcast domain.&lt;/t&gt;</td></tr><tr><th id="L42"><a href="#L42">42</a></th><td></td></tr><tr><th id="L43"><a href="#L43">43</a></th><td>    &lt;t&gt;This specification defines package formats and required client behavior</td></tr><tr><th id="L44"><a href="#L44">44</a></th><td>      to enable such file transfers between conforming clients.&lt;/t&gt;</td></tr><tr><th id="L45"><a href="#L45">45</a></th><td></td></tr><tr><th id="L46"><a href="#L46">46</a></th><td>    &lt;t&gt;This document describes the interactions required for the following</td></tr><tr><th id="L47"><a href="#L47">47</a></th><td>      tasks:</td></tr><tr><th id="L48"><a href="#L48">48</a></th><td>      &lt;list style="numbers"&gt;</td></tr><tr><th id="L49"><a href="#L49">49</a></th><td>        &lt;t&gt;Discovery of other clients&lt;/t&gt;</td></tr><tr><th id="L50"><a href="#L50">50</a></th><td>        &lt;t&gt;Discovery of files offered by those clients&lt;/t&gt;</td></tr><tr><th id="L51"><a href="#L51">51</a></th><td>        &lt;t&gt;Request of transfer and transfer of files between clients&lt;/t&gt;</td></tr><tr><th id="L52"><a href="#L52">52</a></th><td>      &lt;/list&gt;</td></tr><tr><th id="L53"><a href="#L53">53</a></th><td>    &lt;/t&gt;</td></tr><tr><th id="L54"><a href="#L54">54</a></th><td>  &lt;/section&gt;</td></tr><tr><th id="L55"><a href="#L55">55</a></th><td>  </td></tr><tr><th id="L56"><a href="#L56">56</a></th><td>  &lt;section title="Design Objectives"&gt;</td></tr><tr><th id="L57"><a href="#L57">57</a></th><td>    &lt;section title="Problem Description"&gt;</td></tr><tr><th id="L58"><a href="#L58">58</a></th><td>        &lt;t&gt; NAME is designed to offer a way for ad-hoc file sharing between</td></tr><tr><th id="L59"><a href="#L59">59</a></th><td>        multiple peers in a single broadcast domain. It includes features for</td></tr><tr><th id="L60"><a href="#L60">60</a></th><td>        peer and file discovery, as well as file transfers. For this no manual</td></tr><tr><th id="L61"><a href="#L61">61</a></th><td>        configuration or central server is needed.&lt;/t&gt; </td></tr><tr><th id="L62"><a href="#L62">62</a></th><td>        </td></tr><tr><th id="L63"><a href="#L63">63</a></th><td>        &lt;t&gt; NAME does not offer protection against malicious peers</td></tr><tr><th id="L64"><a href="#L64">64</a></th><td>        or attackers in the same network and is designed for trustworthy</td></tr><tr><th id="L65"><a href="#L65">65</a></th><td>        network environments or use cases where no confidentiality for transfered</td></tr><tr><th id="L66"><a href="#L66">66</a></th><td>        data is needed.&lt;/t&gt;</td></tr><tr><th id="L67"><a href="#L67">67</a></th><td>    &lt;/section&gt;</td></tr><tr><th id="L68"><a href="#L68">68</a></th><td>    </td></tr><tr><th id="L69"><a href="#L69">69</a></th><td>    </td></tr><tr><th id="L70"><a href="#L70">70</a></th><td>    &lt;section title="Intended Use Cases"&gt;</td></tr><tr><th id="L71"><a href="#L71">71</a></th><td>        &lt;t&gt; The main use case for NAME is ad-hoc file transfer between two</td></tr><tr><th id="L72"><a href="#L72">72</a></th><td>        users. These users might not have the technical knowledge or time</td></tr><tr><th id="L73"><a href="#L73">73</a></th><td>        to configure and use more complicated file transfer protocols and</td></tr><tr><th id="L74"><a href="#L74">74</a></th><td>        NAME is designed to make quick file transfers as straightforward as possible.</td></tr><tr><th id="L75"><a href="#L75">75</a></th><td>        &lt;/t&gt;</td></tr><tr><th id="L76"><a href="#L76">76</a></th><td>        </td></tr><tr><th id="L77"><a href="#L77">77</a></th><td>        &lt;t&gt; Because NAME's peer discovery mechanism relies on UDP broadcast messages</td></tr><tr><th id="L78"><a href="#L78">78</a></th><td>        the only hard requirement for possible use cases is the existence of a single</td></tr><tr><th id="L79"><a href="#L79">79</a></th><td>        broadcast domain. This allows the usage of NAME in different scenarios like</td></tr><tr><th id="L80"><a href="#L80">80</a></th><td>        classroom environments or company meetings but makes file transfer over</td></tr><tr><th id="L81"><a href="#L81">81</a></th><td>        large network like the Internet infeasible. &lt;/t&gt;</td></tr><tr><th id="L82"><a href="#L82">82</a></th><td>    &lt;/section&gt;</td></tr><tr><th id="L83"><a href="#L83">83</a></th><td>    </td></tr><tr><th id="L84"><a href="#L84">84</a></th><td>    </td></tr><tr><th id="L85"><a href="#L85">85</a></th><td>    &lt;section title="General Requirements"&gt;</td></tr><tr><th id="L86"><a href="#L86">86</a></th><td>      &lt;t&gt;&lt;list style="numbers"&gt;</td></tr><tr><th id="L87"><a href="#L87">87</a></th><td>        &lt;t&gt; Automatic discovery of peers &lt;/t&gt;</td></tr><tr><th id="L88"><a href="#L88">88</a></th><td>        &lt;t&gt; Minimal protocol overhead, no periodic announcements &lt;/t&gt;</td></tr><tr><th id="L89"><a href="#L89">89</a></th><td>        &lt;t&gt; Concurrent sending and receiving of files is possible &lt;/t&gt;</td></tr><tr><th id="L90"><a href="#L90">90</a></th><td>        &lt;t&gt; Integrity checking of received files using cryptographic hashing &lt;/t&gt;</td></tr><tr><th id="L91"><a href="#L91">91</a></th><td>        &lt;/list&gt;&lt;/t&gt;</td></tr><tr><th id="L92"><a href="#L92">92</a></th><td>    &lt;/section&gt;</td></tr><tr><th id="L93"><a href="#L93">93</a></th><td>    </td></tr><tr><th id="L94"><a href="#L94">94</a></th><td>  &lt;/section&gt;</td></tr><tr><th id="L95"><a href="#L95">95</a></th><td></td></tr><tr><th id="L96"><a href="#L96">96</a></th><td>  &lt;section title="Security Considerations"&gt;</td></tr><tr><th id="L97"><a href="#L97">97</a></th><td>    &lt;t&gt;The dangers of an untrusted network are not taken into consideration in</td></tr><tr><th id="L98"><a href="#L98">98</a></th><td>      this protocol. In untrusted networks, users should ensure connection</td></tr><tr><th id="L99"><a href="#L99">99</a></th><td>      integrity by using external tools, e.g. routing messages through a</td></tr><tr><th id="L100"><a href="#L100">100</a></th><td>      Virtual Private Network.&lt;/t&gt;</td></tr><tr><th id="L101"><a href="#L101">101</a></th><td>  &lt;/section&gt;</td></tr><tr><th id="L102"><a href="#L102">102</a></th><td>   </td></tr><tr><th id="L103"><a href="#L103">103</a></th><td>  &lt;section title="High Level Overview"&gt;</td></tr><tr><th id="L104"><a href="#L104">104</a></th><td>        &lt;t&gt; The presented protocol can be divided into three separated </td></tr><tr><th id="L105"><a href="#L105">105</a></th><td>        problems: Peer discovery, file discovery and file transfer. </td></tr><tr><th id="L106"><a href="#L106">106</a></th><td>        &lt;/t&gt;</td></tr><tr><th id="L107"><a href="#L107">107</a></th><td>        </td></tr><tr><th id="L108"><a href="#L108">108</a></th><td>        &lt;t&gt;</td></tr><tr><th id="L109"><a href="#L109">109</a></th><td>        In a typical usage scenario a user (A) wants to receive</td></tr><tr><th id="L110"><a href="#L110">110</a></th><td>        a file (F) from another user (B). The peer discovery part is</td></tr><tr><th id="L111"><a href="#L111">111</a></th><td>        needed to establish a connection between the clients of</td></tr><tr><th id="L112"><a href="#L112">112</a></th><td>        A and B. </td></tr><tr><th id="L113"><a href="#L113">113</a></th><td>        &lt;/t&gt;</td></tr><tr><th id="L114"><a href="#L114">114</a></th><td>        </td></tr><tr><th id="L115"><a href="#L115">115</a></th><td>        </td></tr><tr><th id="L116"><a href="#L116">116</a></th><td>        &lt;t&gt;</td></tr><tr><th id="L117"><a href="#L117">117</a></th><td>        To find peers a special HELLO packet is sent as UDP broadcast. Other clients</td></tr><tr><th id="L118"><a href="#L118">118</a></th><td>        answer with an ID packet to the sender.</td></tr><tr><th id="L119"><a href="#L119">119</a></th><td>        &lt;/t&gt;</td></tr><tr><th id="L120"><a href="#L120">120</a></th><td>        &lt;t&gt;</td></tr><tr><th id="L121"><a href="#L121">121</a></th><td>        When the connection exists client A may ask client B for a list</td></tr><tr><th id="L122"><a href="#L122">122</a></th><td>        of offered files. B returns a file containing a list of information about </td></tr><tr><th id="L123"><a href="#L123">123</a></th><td>        its files.</td></tr><tr><th id="L124"><a href="#L124">124</a></th><td>        This file list exchange is only a special kind of normal file transfers. </td></tr><tr><th id="L125"><a href="#L125">125</a></th><td>        This allows for an easier protocol implementation and a more</td></tr><tr><th id="L126"><a href="#L126">126</a></th><td>        efficient protocol. </td></tr><tr><th id="L127"><a href="#L127">127</a></th><td>        &lt;/t&gt;</td></tr><tr><th id="L128"><a href="#L128">128</a></th><td>        &lt;t&gt;</td></tr><tr><th id="L129"><a href="#L129">129</a></th><td>        The actual file transfer occurs when A sends a file request</td></tr><tr><th id="L130"><a href="#L130">130</a></th><td>        including one of the received hashes and connection information.</td></tr><tr><th id="L131"><a href="#L131">131</a></th><td>        These connection details enable B to create a direct TCP</td></tr><tr><th id="L132"><a href="#L132">132</a></th><td>        connection between both clients to transfer the actual file</td></tr><tr><th id="L133"><a href="#L133">133</a></th><td>        data efficiently.</td></tr><tr><th id="L134"><a href="#L134">134</a></th><td>        &lt;/t&gt;</td></tr><tr><th id="L135"><a href="#L135">135</a></th><td>        </td></tr><tr><th id="L136"><a href="#L136">136</a></th><td>        &lt;t&gt;     </td></tr><tr><th id="L137"><a href="#L137">137</a></th><td>        The next sections describe the three highlighted steps explicitly</td></tr><tr><th id="L138"><a href="#L138">138</a></th><td>        and include the actual implementation details.</td></tr><tr><th id="L139"><a href="#L139">139</a></th><td>        &lt;/t&gt;</td></tr><tr><th id="L140"><a href="#L140">140</a></th><td>  &lt;/section&gt;</td></tr><tr><th id="L141"><a href="#L141">141</a></th><td>  </td></tr><tr><th id="L142"><a href="#L142">142</a></th><td>  &lt;section title="Peer Discovery"&gt;</td></tr><tr><th id="L143"><a href="#L143">143</a></th><td>        &lt;t&gt;</td></tr><tr><th id="L144"><a href="#L144">144</a></th><td>        A peer that searches for other hosts on the network </td></tr><tr><th id="L145"><a href="#L145">145</a></th><td>        can send a HELLO packet as described below to the broadcast</td></tr><tr><th id="L146"><a href="#L146">146</a></th><td>        address on UDP port XYZ. Replies in form of ID packets tell</td></tr><tr><th id="L147"><a href="#L147">147</a></th><td>        the peer about available connections.</td></tr><tr><th id="L148"><a href="#L148">148</a></th><td>        </td></tr><tr><th id="L149"><a href="#L149">149</a></th><td>        Each peer that wants to offer files to others needs to listen</td></tr><tr><th id="L150"><a href="#L150">150</a></th><td>        on UDP port XYZ for broadcast messages of HELLO packets.</td></tr><tr><th id="L151"><a href="#L151">151</a></th><td>        In order to make itself known to the broadcasting peer it replies</td></tr><tr><th id="L152"><a href="#L152">152</a></th><td>        with an ID packet containing information about itself and how</td></tr><tr><th id="L153"><a href="#L153">153</a></th><td>        to request its file list. </td></tr><tr><th id="L154"><a href="#L154">154</a></th><td>        &lt;/t&gt;</td></tr><tr><th id="L155"><a href="#L155">155</a></th><td></td></tr><tr><th id="L156"><a href="#L156">156</a></th><td>        &lt;section title="HELLO"&gt;</td></tr><tr><th id="L157"><a href="#L157">157</a></th><td>        &lt;t&gt;</td></tr><tr><th id="L158"><a href="#L158">158</a></th><td>        A HELLO packet is an UDP packet with the following content:</td></tr><tr><th id="L159"><a href="#L159">159</a></th><td>        &lt;list style="numbers"&gt;</td></tr><tr><th id="L160"><a href="#L160">160</a></th><td>        &lt;t&gt; packet type = 00&lt;/t&gt;</td></tr><tr><th id="L161"><a href="#L161">161</a></th><td>        &lt;t&gt; peer id &lt;/t&gt;</td></tr><tr><th id="L162"><a href="#L162">162</a></th><td>        &lt;t&gt; peer alias / nickname&lt;/t&gt;</td></tr><tr><th id="L163"><a href="#L163">163</a></th><td>        &lt;/list&gt;</td></tr><tr><th id="L164"><a href="#L164">164</a></th><td>    &lt;/t&gt;</td></tr><tr><th id="L165"><a href="#L165">165</a></th><td>    </td></tr><tr><th id="L166"><a href="#L166">166</a></th><td>    &lt;figure&gt;</td></tr><tr><th id="L167"><a href="#L167">167</a></th><td>    &lt;artwork&gt;</td></tr><tr><th id="L168"><a href="#L168">168</a></th><td>    | type    | peer id   | alias |</td></tr><tr><th id="L169"><a href="#L169">169</a></th><td>    | 2 bit   | 160 bit   | *     |</td></tr><tr><th id="L170"><a href="#L170">170</a></th><td>    &lt;/artwork&gt;</td></tr><tr><th id="L171"><a href="#L171">171</a></th><td>    &lt;/figure&gt;</td></tr><tr><th id="L172"><a href="#L172">172</a></th><td>    </td></tr><tr><th id="L173"><a href="#L173">173</a></th><td>        &lt;t&gt;</td></tr><tr><th id="L174"><a href="#L174">174</a></th><td>        The lenght of the alias can be calculated through the length </td></tr><tr><th id="L175"><a href="#L175">175</a></th><td>        of the whole UDP packet.</td></tr><tr><th id="L176"><a href="#L176">176</a></th><td>        &lt;/t&gt;</td></tr><tr><th id="L177"><a href="#L177">177</a></th><td>        </td></tr><tr><th id="L178"><a href="#L178">178</a></th><td>        &lt;t&gt;</td></tr><tr><th id="L179"><a href="#L179">179</a></th><td>        "peer id" is a unique identifier generated by the client that enables</td></tr><tr><th id="L180"><a href="#L180">180</a></th><td>        other peers to recognize a client reconnecting. This is needed in order to</td></tr><tr><th id="L181"><a href="#L181">181</a></th><td>        continue incomplete file transfers.</td></tr><tr><th id="L182"><a href="#L182">182</a></th><td>        This id may be implemented by a client as SHA1 of its MAC address but a</td></tr><tr><th id="L183"><a href="#L183">183</a></th><td>        client that desires to stop old file transfers to continue MAY reset its</td></tr><tr><th id="L184"><a href="#L184">184</a></th><td>        peer id at will.</td></tr><tr><th id="L185"><a href="#L185">185</a></th><td>        This is not a secure method to identify a peer!</td></tr><tr><th id="L186"><a href="#L186">186</a></th><td>        &lt;/t&gt;</td></tr><tr><th id="L187"><a href="#L187">187</a></th><td>        &lt;t&gt;</td></tr><tr><th id="L188"><a href="#L188">188</a></th><td>        "peer alias" is a human readable name of the peer not further specified. </td></tr><tr><th id="L189"><a href="#L189">189</a></th><td>        &lt;/t&gt;</td></tr><tr><th id="L190"><a href="#L190">190</a></th><td>        </td></tr><tr><th id="L191"><a href="#L191">191</a></th><td>        &lt;t&gt;</td></tr><tr><th id="L192"><a href="#L192">192</a></th><td>        Because HELLO packets can evoke a large amount of responses</td></tr><tr><th id="L193"><a href="#L193">193</a></th><td>        and require a reaction by all other active peers, a conforming</td></tr><tr><th id="L194"><a href="#L194">194</a></th><td>        client MUST NOT send redundant HELLO packets and should store</td></tr><tr><th id="L195"><a href="#L195">195</a></th><td>        the received replies for later usage. Only if the searched</td></tr><tr><th id="L196"><a href="#L196">196</a></th><td>        peer does not reply more HELLO packets can be send.</td></tr><tr><th id="L197"><a href="#L197">197</a></th><td>        &lt;/t&gt;</td></tr><tr><th id="L198"><a href="#L198">198</a></th><td>        &lt;/section&gt;</td></tr><tr><th id="L199"><a href="#L199">199</a></th><td></td></tr><tr><th id="L200"><a href="#L200">200</a></th><td></td></tr><tr><th id="L201"><a href="#L201">201</a></th><td></td></tr><tr><th id="L202"><a href="#L202">202</a></th><td>        &lt;section title="ID"&gt;</td></tr><tr><th id="L203"><a href="#L203">203</a></th><td>            &lt;t&gt;</td></tr><tr><th id="L204"><a href="#L204">204</a></th><td>            An ID packet contains the following information:</td></tr><tr><th id="L205"><a href="#L205">205</a></th><td>                &lt;list style="numbers"&gt;</td></tr><tr><th id="L206"><a href="#L206">206</a></th><td>            &lt;t&gt; packet type = 01&lt;/t&gt;</td></tr><tr><th id="L207"><a href="#L207">207</a></th><td>            &lt;t&gt; peer id&lt;/t&gt;</td></tr><tr><th id="L208"><a href="#L208">208</a></th><td>            &lt;t&gt; hash value of the offered file list&lt;/t&gt;</td></tr><tr><th id="L209"><a href="#L209">209</a></th><td>            &lt;t&gt; peer alias / nickname&lt;/t&gt;</td></tr><tr><th id="L210"><a href="#L210">210</a></th><td>            &lt;/list&gt;</td></tr><tr><th id="L211"><a href="#L211">211</a></th><td>            &lt;/t&gt; </td></tr><tr><th id="L212"><a href="#L212">212</a></th><td>        </td></tr><tr><th id="L213"><a href="#L213">213</a></th><td>            &lt;figure&gt;</td></tr><tr><th id="L214"><a href="#L214">214</a></th><td>        &lt;artwork&gt;</td></tr><tr><th id="L215"><a href="#L215">215</a></th><td>        | type    | peer id   | hash of file list | alias |</td></tr><tr><th id="L216"><a href="#L216">216</a></th><td>        | 2 bit   | 160 bit   | 160 bit           | *     |</td></tr><tr><th id="L217"><a href="#L217">217</a></th><td>        &lt;/artwork&gt;</td></tr><tr><th id="L218"><a href="#L218">218</a></th><td>        &lt;/figure&gt;</td></tr><tr><th id="L219"><a href="#L219">219</a></th><td>        </td></tr><tr><th id="L220"><a href="#L220">220</a></th><td>            &lt;t&gt;peer id and alias are as specified for HELLO packets.&lt;/t&gt;</td></tr><tr><th id="L221"><a href="#L221">221</a></th><td>            &lt;t&gt;</td></tr><tr><th id="L222"><a href="#L222">222</a></th><td>            hash value of the offered file list can be used by the receiver </td></tr><tr><th id="L223"><a href="#L223">223</a></th><td>            for a regular file transfer request from that peer. It is the</td></tr><tr><th id="L224"><a href="#L224">224</a></th><td>            SHA1 hash value of the local file list file.</td></tr><tr><th id="L225"><a href="#L225">225</a></th><td>            The file list provides information about all files the sender offers.</td></tr><tr><th id="L226"><a href="#L226">226</a></th><td>            &lt;/t&gt;</td></tr><tr><th id="L227"><a href="#L227">227</a></th><td>        </td></tr><tr><th id="L228"><a href="#L228">228</a></th><td>            &lt;t&gt;</td></tr><tr><th id="L229"><a href="#L229">229</a></th><td>            The main information transfered by the ID packet is the mapping</td></tr><tr><th id="L230"><a href="#L230">230</a></th><td>            between IP address and peer alias / id, as well as the hash</td></tr><tr><th id="L231"><a href="#L231">231</a></th><td>            value of the file list. ID packets SHOULD be only sent</td></tr><tr><th id="L232"><a href="#L232">232</a></th><td>            as an answer to HELLO packets. </td></tr><tr><th id="L233"><a href="#L233">233</a></th><td>            &lt;/t&gt;</td></tr><tr><th id="L234"><a href="#L234">234</a></th><td>        &lt;/section&gt;</td></tr><tr><th id="L235"><a href="#L235">235</a></th><td>  &lt;/section&gt;</td></tr><tr><th id="L236"><a href="#L236">236</a></th><td>  </td></tr><tr><th id="L237"><a href="#L237">237</a></th><td>  &lt;section title="File Discovery"&gt;</td></tr><tr><th id="L238"><a href="#L238">238</a></th><td>      &lt;t&gt; A peer that wants to learn about the files offered by another peer can </td></tr><tr><th id="L239"><a href="#L239">239</a></th><td>      request that peers file list. This is done by using the file transfer mechanisms </td></tr><tr><th id="L240"><a href="#L240">240</a></th><td>      introduced in the next section. Instead of requesting a certain file by using </td></tr><tr><th id="L241"><a href="#L241">241</a></th><td>      the identifying hash, the requesting peer in that case asks for the hash </td></tr><tr><th id="L242"><a href="#L242">242</a></th><td>      transmitted in the ID packet. </td></tr><tr><th id="L243"><a href="#L243">243</a></th><td>      The returned file MUST conform to the structure described in this section.</td></tr><tr><th id="L244"><a href="#L244">244</a></th><td>      &lt;/t&gt;</td></tr><tr><th id="L245"><a href="#L245">245</a></th><td>      </td></tr><tr><th id="L246"><a href="#L246">246</a></th><td>      &lt;section title="File list"&gt;  </td></tr><tr><th id="L247"><a href="#L247">247</a></th><td>          &lt;t&gt;</td></tr><tr><th id="L248"><a href="#L248">248</a></th><td>          A file list is composed of zero or more file entries. </td></tr><tr><th id="L249"><a href="#L249">249</a></th><td>          Each file entry contains the following information</td></tr><tr><th id="L250"><a href="#L250">250</a></th><td>          &lt;list style="numbers"&gt;</td></tr><tr><th id="L251"><a href="#L251">251</a></th><td>            &lt;t&gt; file name (UTF-8 string)&lt;/t&gt;</td></tr><tr><th id="L252"><a href="#L252">252</a></th><td>            &lt;t&gt; file size (64bit unsigned integer)&lt;/t&gt;</td></tr><tr><th id="L253"><a href="#L253">253</a></th><td>            &lt;t&gt; cryptographic hash (sha1 hash of file contents)&lt;/t&gt;</td></tr><tr><th id="L254"><a href="#L254">254</a></th><td>            &lt;t&gt; MAY contain additional meta data (UTF-8 string)&lt;/t&gt;</td></tr><tr><th id="L255"><a href="#L255">255</a></th><td>            &lt;/list&gt;</td></tr><tr><th id="L256"><a href="#L256">256</a></th><td>          Those data fields for one file are seperated using NULL bytes. Each entry </td></tr><tr><th id="L257"><a href="#L257">257</a></th><td>          describing one file is given in a seperate line.</td></tr><tr><th id="L258"><a href="#L258">258</a></th><td>          &lt;/t&gt;</td></tr><tr><th id="L259"><a href="#L259">259</a></th><td>          &lt;t&gt;</td></tr><tr><th id="L260"><a href="#L260">260</a></th><td>          The file name should be a human readable string identifying the file. It </td></tr><tr><th id="L261"><a href="#L261">261</a></th><td>          contains no further structure.&lt;/t&gt;</td></tr><tr><th id="L262"><a href="#L262">262</a></th><td>          &lt;t&gt;The hash is used to request a file with a GET packet and to check wether a</td></tr><tr><th id="L263"><a href="#L263">263</a></th><td>          file transfer was correct. </td></tr><tr><th id="L264"><a href="#L264">264</a></th><td>          Also it is needed for a client trying to continue an interrupted file transfer </td></tr><tr><th id="L265"><a href="#L265">265</a></th><td>          to recognize an identical file.&lt;/t&gt;</td></tr><tr><th id="L266"><a href="#L266">266</a></th><td>          </td></tr><tr><th id="L267"><a href="#L267">267</a></th><td>          &lt;t&gt;Clients MAY implement folders, tagging or </td></tr><tr><th id="L268"><a href="#L268">268</a></th><td>          other information in the meta data field.</td></tr><tr><th id="L269"><a href="#L269">269</a></th><td>          &lt;/t&gt;</td></tr><tr><th id="L270"><a href="#L270">270</a></th><td>      &lt;/section&gt;</td></tr><tr><th id="L271"><a href="#L271">271</a></th><td>  &lt;/section&gt;</td></tr><tr><th id="L272"><a href="#L272">272</a></th><td>  </td></tr><tr><th id="L273"><a href="#L273">273</a></th><td>  &lt;section title="File Transfer"&gt;</td></tr><tr><th id="L274"><a href="#L274">274</a></th><td>  &lt;t&gt; To request a file, a peer sends a GET packet to the peer offering the file.</td></tr><tr><th id="L275"><a href="#L275">275</a></th><td>  The GET packet includes the hash of the requested file as specified in the corresponding</td></tr><tr><th id="L276"><a href="#L276">276</a></th><td>  file entry described in the last section about file lists. </td></tr><tr><th id="L277"><a href="#L277">277</a></th><td>  Furthermore, it includes an offset into the file</td></tr><tr><th id="L278"><a href="#L278">278</a></th><td>  to allow the resuming of disrupted downloads. </td></tr><tr><th id="L279"><a href="#L279">279</a></th><td>  Finally, a port is provided to allow the creation of a file transfer connection. &lt;/t&gt;</td></tr><tr><th id="L280"><a href="#L280">280</a></th><td></td></tr><tr><th id="L281"><a href="#L281">281</a></th><td>  &lt;t&gt; </td></tr><tr><th id="L282"><a href="#L282">282</a></th><td>  &lt;list style="numbers"&gt;</td></tr><tr><th id="L283"><a href="#L283">283</a></th><td>        &lt;t&gt; packet type = 10&lt;/t&gt;</td></tr><tr><th id="L284"><a href="#L284">284</a></th><td>        &lt;t&gt; hash of requested file&lt;/t&gt;</td></tr><tr><th id="L285"><a href="#L285">285</a></th><td>        &lt;t&gt; port &lt;/t&gt;</td></tr><tr><th id="L286"><a href="#L286">286</a></th><td>        &lt;t&gt; offset (in bytes)&lt;/t&gt;</td></tr><tr><th id="L287"><a href="#L287">287</a></th><td>        &lt;t&gt; length (in bytes)&lt;/t&gt;</td></tr><tr><th id="L288"><a href="#L288">288</a></th><td>        &lt;/list&gt;</td></tr><tr><th id="L289"><a href="#L289">289</a></th><td>  &lt;/t&gt;</td></tr><tr><th id="L290"><a href="#L290">290</a></th><td>  </td></tr><tr><th id="L291"><a href="#L291">291</a></th><td>  &lt;figure&gt;</td></tr><tr><th id="L292"><a href="#L292">292</a></th><td>    &lt;artwork&gt;</td></tr><tr><th id="L293"><a href="#L293">293</a></th><td>    | type    | hash of file | port   | offset | length |</td></tr><tr><th id="L294"><a href="#L294">294</a></th><td>    | 2 bit   | 160 bit      | 16 bit | 64 bit | 64 bit |</td></tr><tr><th id="L295"><a href="#L295">295</a></th><td>    &lt;/artwork&gt;</td></tr><tr><th id="L296"><a href="#L296">296</a></th><td>  &lt;/figure&gt;</td></tr><tr><th id="L297"><a href="#L297">297</a></th><td>   </td></tr><tr><th id="L298"><a href="#L298">298</a></th><td>  &lt;t&gt;The hash of the requested file is as listed in the file list.&lt;/t&gt;     </td></tr><tr><th id="L299"><a href="#L299">299</a></th><td>  &lt;t&gt;</td></tr><tr><th id="L300"><a href="#L300">300</a></th><td>  Offset and length may be used by a requesting client in order to continue an unfinished</td></tr><tr><th id="L301"><a href="#L301">301</a></th><td>  file transfer or even to pull parts of a file from different sources.</td></tr><tr><th id="L302"><a href="#L302">302</a></th><td>  &lt;/t&gt;</td></tr><tr><th id="L303"><a href="#L303">303</a></th><td>  </td></tr><tr><th id="L304"><a href="#L304">304</a></th><td>  &lt;t&gt;</td></tr><tr><th id="L305"><a href="#L305">305</a></th><td>  The actual file transfer is started after a client receives a GET packet.</td></tr><tr><th id="L306"><a href="#L306">306</a></th><td>  In response to the GET packet the sender opens a TCP connection to the</td></tr><tr><th id="L307"><a href="#L307">307</a></th><td>  IP of the requesting peer and the port included in the GET packet.</td></tr><tr><th id="L308"><a href="#L308">308</a></th><td>  It then starts sending the raw file data. After all bytes</td></tr><tr><th id="L309"><a href="#L309">309</a></th><td>  are transmitted the receiver MAY calculate the sha1 hash of the transferred</td></tr><tr><th id="L310"><a href="#L310">310</a></th><td>  file and compare it to the requested files' hash value. If both are equal the file</td></tr><tr><th id="L311"><a href="#L311">311</a></th><td>  was transfered succesfully, otherwise an error occured.  </td></tr><tr><th id="L312"><a href="#L312">312</a></th><td>  &lt;/t&gt; </td></tr><tr><th id="L313"><a href="#L313">313</a></th><td>  </td></tr><tr><th id="L314"><a href="#L314">314</a></th><td>  &lt;/section&gt;</td></tr><tr><th id="L315"><a href="#L315">315</a></th><td>&lt;/middle&gt;</td></tr><tr><th id="L316"><a href="#L316">316</a></th><td></td></tr><tr><th id="L317"><a href="#L317">317</a></th><td>&lt;!-- -            BACK             - --&gt;</td></tr><tr><th id="L318"><a href="#L318">318</a></th><td></td></tr><tr><th id="L319"><a href="#L319">319</a></th><td>&lt;back&gt;</td></tr><tr><th id="L320"><a href="#L320">320</a></th><td>  &lt;section title="Glossary"&gt;</td></tr><tr><th id="L321"><a href="#L321">321</a></th><td>  &lt;/section&gt;</td></tr><tr><th id="L322"><a href="#L322">322</a></th><td>&lt;/back&gt;</td></tr><tr><th id="L323"><a href="#L323">323</a></th><td></td></tr><tr><th id="L324"><a href="#L324">324</a></th><td>&lt;/rfc&gt;</td></tr></tbody></table>
        </div>
          <div class="buttons">
            <form method="get" action="">
              <div id="delete">
                <input type="hidden" name="action" value="delete" />
                <input type="submit" value="Delete attachment" />
              </div>
            </form>
          </div>
    </div>
    <div id="altlinks">
      <h3>Download in other formats:</h3>
      <ul>
        <li class="last first">
          <a rel="nofollow" href="/trac/tm-projekt6/raw-attachment/wiki/Draft_Gruppe6/rfc_6.xml">Original Format</a>
        </li>
      </ul>
    </div>
    </div>
    <div id="footer" lang="en" xml:lang="en"><hr />
      <a id="tracpowered" href="http://trac.edgewall.org/"><img src="/trac/tm-projekt6/chrome/common/trac_logo_mini.png" height="30" width="107" alt="Trac Powered" /></a>
      <p class="left">
        Powered by <a href="/trac/tm-projekt6/about"><strong>Trac 0.11.7</strong></a><br />
        By <a href="http://www.edgewall.org/">Edgewall Software</a>.
      </p>
      <p class="right">Visit the Trac open source project at<br /><a href="http://trac.edgewall.org/">http://trac.edgewall.org/</a></p>
    </div>
  </body>
</html>