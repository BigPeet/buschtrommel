<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<!-- vim: set noexpandtab : -->
<rfc ipr="none">
	<front>
		<title>Buschtrommel</title>
		<author />
		<date />
		<area>Applications</area>
		<workgroup>Telematics project 12/13</workgroup>
		<abstract>
			<t>This document is a draft for the official specification of the Buschtrommel protocol. Buschtrommel is used to find and transfer files between clients in the same network domain without the need for a central server.</t>
		</abstract>
	</front>
	<middle>
		<section title="Introduction">
			<t>This document specifies the Buschtrommel protocol, which is used for ad-hoc file transfer between peers in the same network domain.</t>
			<t>This specificiation defines package formats and required client behavior to enable such file transfers between conforming, well-behaved clients.</t>
			<t>This document describes the mechanisms required for completion of the following tasks:
				<list style="symbols">
					<t>peer discovery</t>
					<t>file announcement</t>
					<t>file transfer</t>
				</list>
			</t>
			<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119.</t>
		</section>

		<section title="High Level Overview">
			<t>
				Buschtrommel is focused on scenarios, where the set of shared files is changed frequently. Files are announced in a short-termed fashion. Clients will not be connected for more than a few hours. The fast announcement of new clients and files is one of the main focuses.
			</t>
			<t>The protocol features can be roughly split into four tasks:
				<list style="symbols">
					<t>announcements of peers</t>
					<t>exploration of offered files</t>
					<t>updates of offered files</t>
					<t>file transfers</t>
				</list>
			</t>
		</section>

		<section title="General Notes">
			<t>
				Buschtrommel uses the following multicast addresses to address all participating peers:
				<list style="symbols">
					<t>239.255.0.113 for IPv4</t>
					<t>ff02::7171 for IPv6</t>
				</list>
				<t>All UDP packets sent SHALL have a Destination Port of TODO set. In order to participate in the network, a client must listen on this port.</t>
				<t>Messages sent using UDP MUST NOT exceed 512 octets length.</t>

				<t>Messages are strings encoded as UTF-8. Messages contain several field which are seperated by a field separator. Each message is terminated by a message separator. ASCII control caracter 31 (Unit Separator) is used as a field separator, ASCII control character 30 (Record Separator) is used as a message separator. // TODO reference ASCII Standard. In this document, "|" is used to visualize a field separator and "\" is used to visualize a message separator.</t>
			<t>Integers are represented in their decimal form, encoded as UTF-8 strings.</t>
			<t>All control messages are of the following format:
				<figure>
					<artwork>
						Type|Field1|Field2|[...]|Fieldn\
					</artwork>
				</figure>
				The "Type" field identifies the message type while all remaining fields carry information as specified in the message type specification. Fields MUST NOT contain any of the field or message separator characters.

			</t>

			</t>
		</section>

		<section title="Peer Discovery">
			<section title="HI message">
				<t>
					A peer MAY send a HI message at any time to inform other peers of its presence and to request a reply from all peers in form of a YO message. Usually, a HI message is send immediately after joining the network.

					A HI message is sent using UDP and contains the following fields:

					<list>
						<t>The Type field, set to "HI".</t>
						<t>A Port field containing an integer identifying a TCP port that the peer sending the message uses for Buschtrommel TCP communication. The peer MUST listen for incoming connections from other peers on this port.</t>
						<t>A human-readable name that is to be displayed by a client as an alias for the peer sending the message. The field may be empty, but MUST NOT be omitted.</t>
					</list>
					<t>A client SHOULD only send as many HI messages as are required for its operation.</t>
				</t>
			</section>
			<section title="YO message">
				<t>
					<t>YO messages are sent as replies to HI messages. Every HI message SHOULD be replied to with a YO message. YO messages are sent either directly to the unicast address of the sender of the HI message that is being replied to or to the multicast address of all participating peers.</t>
					<t>A YO message is sent using UDP and has its Type field set to "YO". All other fields are identical to those of a HI message.</t>

					<t>Clients MAY use YO messages they receive to update their internal state concerning the availability of other peers.</t>
				</t>
			</section>
		</section>

		<section title="Exploration of offered files">
			<t>
				Initial exploration of file lists is done via TCP unicast: Client A opens a TCP connection to the open port of client B and writes "GETFILELIST\" into the stream
				Client B answers with a Response code and the expected transfer volume like in "File Transfer" //TODO ref, followed by a string that represents the filelist.
				The filelist contains multiple entries, each one formated as follows:
				<figure>
					<artwork>
						hash|TTL|length|virtual path|meta-info\
					</artwork>
				</figure>
				<list style="symbols">
					<t>TTL in seconds, limited by unsigend int 32</t>
					<t>virtual path uses / as path seperator only. The virtual path may be changed and MUST NOT be used for file identification.</t>
					<t>The Meta field can contain any human readable description of the file</t>
					<t>One FileList entry must not exceed the length of 512 Bytes</t>
					<t>There are no spaces between the content of a field and their seperators</t>
				</list>
				An empty file list has a length of 0. the response of client B would look like the following:
				<figure>
					<artwork>
						OK|0\
					</artwork>
				</figure>
			</t>
		</section>

		<section title="Updates of offered files">
			<t>
				Thos updates are sent via UDP multicast and repesent updates of a filelist of a client.
				A client SHOULD NOT sent updates of offered files, instead of offering his file list to other clients.
				One UDP datagram contains exactly one file update, which is the same as one file entry of the file list (with all it's limitations):
				<figure>
					<artwork>
						hash|TTL|length|virtual path|meta-info\
					</artwork>
				</figure>
				//TODO ref Exploration of offered files
			</t>
		</section>

		<section title="File Transfer">
			<t>
				To request a file an client opens a TCP Connection to the open port of the remote peer and writes
				<figure>
					<artwork>
						GET|hash|offset|length\
					</artwork>
				</figure>
				To request a file.

				The hash field contains the hash of a file, that is requested. A client SHOULD requst only thos file, that have been announced before via file list or file updates and have a valid TTL.
				The offet defines the byte in the file, from wich on the sender sends.
				The length defines the number of bytes to transfer, from the offset on.
			</t>
			<t>
				The client, that received such a request MUST response in the following format via the same TCP connection:
				<figure>
					<artwork>
						status code|expected transfer volume\
					</artwork>
				</figure>
				Expected transfer volume is the amount of bytes, that will follow.
				Valid status Codes are "ok", "try again, later", try again, never" //TODO find good names
				If the status code is "ok", the the clients sends the file after the \ seperator.
				The receiving, as well as the sending peer MAY terminate the TCP connection at any given time.
			</t>
		</section>
	</middle>

	<back>

		<references>
			<reference anchor="refs.RFC768">
				<front>
					<title>User Datagram Protocol</title>
					<author initials="J." surname="Postel" fullname="Jon Postel">
						<organization abbrev="ISI">USC/Information Sciences Institute</organization>
					</author>
					<date month="August" year="1980" />
				</front>
				<seriesInfo name="RFC" value="768" />
				<seriesInfo name="STD" value="6" />
			</reference>
			<reference anchor="refs.RFC793">
				<front>
					<title>Transmission Control Protocol</title>
					<author initials="J." surname="Postel" fullname="Jon Postel">
						<organization abbrev="ISI">USC/Information Sciences Institute</organization>
					</author>
					<date month="September" year="1981" />
				</front>
				<seriesInfo name="RFC" value="793" />
				<seriesInfo name="STD" value="7" />
			</reference>
			<reference anchor="refs.RFC791">
				<front>
					<title>Internet Protocol</title>
					<author initials="J." surname="Postel" fullname="Jon Postel">
						<organization abbrev="ISI">USC/Information Sciences Institute</organization>
					</author>
					<date month="September" year="1981" />
				</front>
				<seriesInfo name="RFC" value="791" />
				<seriesInfo name="STD" value="5" />
			</reference>
			<reference anchor="refs.RFC20">
				<front>
					<title>ASCII format for network interchange</title>
					<author initials="C." surname="Cerf" fullname="Vint Cerf">
						<organization abbrev="UCLA">UCLA</organization>
					</author>
					<date month="October" year="1969" />
				</front>
				<seriesInfo name="RFC" value="20" />
			</reference>
		</references>

		<section title="Glossary">
			<t>
				<list>
					<t>Peer - a client in general </t>
					<t>Host - an client, which offers a file to others</t>
				</list>
			</t>
		</section>
	</back>
</rfc>
